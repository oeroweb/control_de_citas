{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuidv4","console","log","type","placeholder","onChange","prototype","Proptypes","func","isRequired","Cita","eliminarCita","onClick","object","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevaCitas","filter","titulo","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b6163997.chunk.js","sourcesContent":["import React, {Fragment, useState} from 'react';\r\n// import uuid from 'uuid';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport Proptypes from 'prop-types';\r\n\r\nconst Formulario = ({crearCita}) => {\r\n  //Crear State de citas\r\n  const [cita, actualizarCita] = useState({\r\n    mascota: '',\r\n    propietario: '',\r\n    fecha: '',\r\n    hora: '',\r\n    sintomas: ''\r\n  });\r\n\r\n  const [error, actualizarError] = useState(false)\r\n\r\n  //funcion que se ejecuta cada que el usuario escribe en un input \r\n  const actualizarState = e => {\r\n    // console.log(e.target.name);\r\n    // console.log(e.target.value);\r\n    actualizarCita({\r\n      ...cita, \r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n  //Extraer los valores\r\n  const {mascota, propietario, fecha, hora, sintomas} = cita;\r\n\r\n  //cuando preciona agregar cita\r\n  const submitCita = e => {\r\n    // alert('Enviando')\r\n    e.preventDefault();\r\n    // console.log('Eviando Form')\r\n\r\n    // Validar\r\n    if(mascota.trim() === '' || propietario.trim() === '' || fecha.trim() === '' || hora.trim() === '' || sintomas.trim() === ''){\r\n      actualizarError(true);\r\n      return;\r\n    }\r\n\r\n    //eliminar mensaje previo\r\n    actualizarError(false);\r\n    // console.log('agrenando...')\r\n    \r\n    //Asignar un Id    \r\n    // cita.id = 20;\r\n    cita.id = uuidv4();\r\n    console.log(cita);\r\n\r\n    //Crear Cita\r\n    crearCita(cita);\r\n\r\n    //Reiniciar formulario\r\n    actualizarCita({\r\n      mascota: '',\r\n      propietario: '',\r\n      fecha: '',\r\n      hora: '',\r\n      sintomas: ''\r\n    })\r\n\r\n\r\n  }\r\n\r\n  return ( \r\n    <Fragment>\r\n      <h2>Crear Cita</h2>\r\n\r\n      {error ? <p className='alerta-error'>Todos los campos son obligatorios </p> : null}\r\n\r\n      <form\r\n        onSubmit={submitCita}\r\n      >\r\n        <label>Nombre Mascota</label>\r\n        <input \r\n          type=\"text\"\r\n          name=\"mascota\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Nombre Mascota\"\r\n          onChange={actualizarState}\r\n          value={mascota}\r\n        />\r\n        <label>Nombre Dueño</label>\r\n        <input \r\n          type=\"text\"\r\n          name=\"propietario\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Nombre Dueño de la Mascota\"\r\n          onChange={actualizarState}\r\n          value={propietario}\r\n        />\r\n        <label>Fecha </label>\r\n        <input \r\n          type=\"date\"\r\n          name=\"fecha\"\r\n          className=\"u-full-width\"\r\n          onChange={actualizarState}\r\n          value={fecha}       \r\n        />\r\n        <label>Date</label>\r\n        <input \r\n          type=\"time\"\r\n          name=\"hora\"\r\n          className=\"u-full-width\"\r\n          onChange={actualizarState}\r\n          value={hora}      \r\n        />\r\n        <label>Síntomas</label>\r\n        <textarea \r\n          className=\"u-full-width\" \r\n          name=\"sintomas\" \r\n          onChange={actualizarState}\r\n          value={sintomas}\r\n          ></textarea>\r\n        \r\n        \r\n        <button \r\n          type=\"submit\"          \r\n          className=\"u-full-width button-primary\"          \r\n        >Agregar Cita </button>\r\n      </form>\r\n    </Fragment>\r\n   );\r\n}\r\n\r\nFormulario.prototype = {\r\n  crearCita: Proptypes.func.isRequired\r\n}\r\nexport default Formulario;","import React from 'react';\r\nimport Proptypes from 'prop-types';\r\n\r\nconst Cita = ({cita, eliminarCita}) => (\r\n  <div className=\"cita\">    \r\n    <p>Mascota: <span>{cita.mascota}</span></p>\r\n    <p>Dueño: <span>{cita.propietario}</span></p>\r\n    <p>Fecha: <span>{cita.fecha}</span></p>\r\n    <p>Hora: <span>{cita.hora}</span></p>\r\n    <p>Simtomas: <span>{cita.sintomas}</span></p>\r\n\r\n    <button className=\"button eliminar u-full-width\"\r\n      onClick={ () => eliminarCita(cita.id) }\r\n    >Eliminar &times;</button>  \r\n    \r\n  </div>\r\n);\r\n\r\nCita.prototype = {\r\n  cita: Proptypes.object.isRequired,\r\n  eliminarCita: Proptypes.func.isRequired\r\n}\r\n \r\nexport default Cita;","import React, {Fragment, useState, useEffect} from 'react';\nimport Formulario from './components/Formulario';\nimport Cita from './components/Cita';\n\n//npm start\n\nfunction App() {\n\n  // citas en local Storage\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n  if(!citasIniciales){\n    citasIniciales = [];\n  }\n\n  //Agregor de Citas\n  const [citas, guardarCitas] = useState(citasIniciales);\n  \n\n  //use effect para ralizar  ciertas operaciones cuando el state cambie\n  useEffect( () => {\n    let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n    if(citasIniciales){\n      localStorage.setItem('citas', JSON.stringify(citas));\n    } else {\n      localStorage.setItem('citas', JSON.stringify([]));\n    }\n  }, [citas] );\n\n  \n\n  //Funcion que tome las citas actuales y agregue la nueva\n  const crearCita = cita => {\n    //console.log(cita);\n    guardarCitas([\n      ...citas, cita\n    ]);\n  }\n\n  //Elmina una sita por el id\n  const eliminarCita = id => {\n    console.log(id);\n    const nuevaCitas = citas.filter(cita => cita.id !== id);\n    guardarCitas(nuevaCitas);\n  }\n\n  //mensaje condicional\n  const titulo = citas.length === 0 ? 'No hay citas' : 'Administra tus citas'  \n\n  return (\n    <Fragment>\n      <h1>Administrador de Pacientes</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario \n              crearCita={crearCita}\n            />\n          </div>\n          <div className=\"one-half column\">\n            <h2> {titulo}</h2>\n            {citas.map(cita => (\n              <Cita\n                key={cita.id}\n                cita={cita}\n                eliminarCita={eliminarCita}           \n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}